#
#
# æ„Ÿè°¢p3terxå¤§ç¥žçš„ä¸€é”®ç¼–è¯‘è„šæœ¬
# 
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
#

name: build lean lede JCG-Q20

on: 
  workflow_dispatch:

env:
  REPO_URL: https://github.com/vb1980/mtk_lede.git
  REPO_BRANCH: mt7915_mtwifi
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/jcg_q20_lede.config
  DIY_P1_SH: script/diy-part1.sh
  DIY_P2_SH: script/diy-part2_jcgq20_lede.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \ 
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \ 
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \ 
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \ 
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \ 
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \ 
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone src
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH lede
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede

    - name: Load cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'mt7915'
        prefix: ${{ github.workspace }}/lede
        
    - name: Load feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF lede/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd lede
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd lede && ./scripts/feeds update -a

    - name: Install feeds
      run: cd lede && ./scripts/feeds install -a

    - name: Update& Install feeds again
      run: |
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load config
      run: |
        [ -e files ] && mv files lede/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE lede/.config
        chmod +x $DIY_P2_SH
        cd lede
        rm -rf feeds/luci/applications/luci-app-openclash
        rm -rf feeds/luci/luci-app-openclash
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download packages
      id: package
      run: |
        cd lede
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile firmware
      id: compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "STATUS=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    - name: Check storage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin to artifact
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Lede_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: lede/bin

    - name: Cleanup bin
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd lede/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
        
    - name: Upload config to artifact
      if: env.STATUS == 'success' && env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@main
      with:
        name: config.buildinfo_${{ env.FILE_DATE }}
        path: ./config    
    
    - name: Upload firmware to artifact
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success' && !cancelled()
      with:
        name: JCG_Q20-lede-firmware
        path: ${{ env.FIRMWARE }}

    - name: Create release tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASETAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ env.URL }})" >> release.txt
        echo "STATUS=success" >> $GITHUB_ENV

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true' && env.STATUS == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASETAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Remove obsoleted artifacts
      uses: Bonnie2980/gha-remove-artifacts@master
      with:
        age: '1 day'
        skip-recent: 3
